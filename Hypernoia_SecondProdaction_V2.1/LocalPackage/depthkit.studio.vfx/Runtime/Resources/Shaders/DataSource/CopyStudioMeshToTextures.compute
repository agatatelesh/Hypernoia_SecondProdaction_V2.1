#pragma kernel CopyStudioMeshToTextures16x16
#pragma kernel CopyStudioMeshToTextures8x8
#pragma kernel CopyStudioMeshToTextures4x4

#include "Packages/nyc.scatter.depthkit.studio/Runtime/Resources/Shaders/Includes/DepthkitStudio.cginc"
#define DK_CORE_PACKED_TRIANGLE
#include "Packages/nyc.scatter.depthkit.core/Runtime/Resources/Shaders/Includes/CoreVertex.cginc"
#include "Packages/nyc.scatter.depthkit.core/Runtime/Resources/Shaders/Includes/CoreTriangle.cginc"

RWTexture2D<float4> _PositionData;
RWTexture2D<float4> _ColorData;
RWTexture2D<float4> _NormalData;
float2 _DataTextureSize;
StructuredBuffer<Triangle> _TriangleBuffer;
StructuredBuffer<int> _TrianglesCount;

float3 _ObjectSpaceCameraPosition;

void CopyStudioMeshToTextures(uint3 id)
{
    uint index = id.x + id.y * _DataTextureSize.x;

    if (index < (uint) _TrianglesCount[0])
    {
        Triangle tri = _TriangleBuffer[index];
        float3 pos = (tri.vertex[0].position + tri.vertex[1].position + tri.vertex[2].position) / 3.0;
        float3 nrm = (tri.vertex[0].normal + tri.vertex[1].normal + tri.vertex[2].normal) / 3.0;
        _PositionData[id.xy] = float4(pos, 1);
        _NormalData[id.xy] = float4(nrm, 1);

        float3 viewDir = normalize(_ObjectSpaceCameraPosition - pos);
        _ColorData[id.xy] = float4(dkSampleColorViewWeightedReprojection(viewDir, pos, nrm), 1);
    }
    else
    {
        _PositionData[id.xy] = float4(0, 0, 0, 0);
        _NormalData[id.xy] = float4(0, 0, 0, 0);
        _ColorData[id.xy] = float4(0, 0, 0, 0);
    }
}

[numthreads(16, 16, 1)]
void CopyStudioMeshToTextures16x16(uint3 id : SV_DispatchThreadID)
{
    CopyStudioMeshToTextures(id);
}

[numthreads(8, 8, 1)]
void CopyStudioMeshToTextures8x8(uint3 id : SV_DispatchThreadID)
{
    CopyStudioMeshToTextures(id);
}

[numthreads(4, 4, 1)]
void CopyStudioMeshToTextures4x4(uint3 id : SV_DispatchThreadID)
{
    CopyStudioMeshToTextures(id);
}