#pragma kernel CopyCoreMeshToTextures16x16
#pragma kernel CopyCoreMeshToTextures8x8
#pragma kernel CopyCoreMeshToTextures4x4

#include "Packages/nyc.scatter.depthkit.core/Runtime/Resources/Shaders/Includes/Depthkit.cginc"
#define DK_CORE_PACKED_TRIANGLE
#include "Packages/nyc.scatter.depthkit.core/Runtime/Resources/Shaders/Includes/CoreVertex.cginc"
#include "Packages/nyc.scatter.depthkit.core/Runtime/Resources/Shaders/Includes/CoreTriangle.cginc"

RWTexture2D<float4> _PositionData;
RWTexture2D<float4> _ColorData;
RWTexture2D<float4> _NormalData;
int _TextureSizeReductionFactor;
float2 _VertexBufferDimensions;
StructuredBuffer<Vertex> _VertexBuffer;

void CopyCoreMeshToTextures(uint3 id)
{
    uint2 scaledId = id * _TextureSizeReductionFactor;
    uint index = scaledId.x + scaledId.y * _VertexBufferDimensions.x;

    //dont write if we cant!
    if (scaledId.x < uint(_VertexBufferDimensions.x) || scaledId.y < uint(_VertexBufferDimensions.y))
    {
        Vertex v = _VertexBuffer[index];

        float2 uv = dkPerspectiveToPackedUV(v.perspectiveIndex, v.uv.xy);
        _PositionData[id.xy] = float4(v.position, 1);
        _NormalData[id.xy] = float4(v.normal, 1);

        //store per vertex color for the particle look up
        float2 colorUV;
        float2 depthUV;
        float2 perspectiveUV;
        uint perspective;
        dkUnpackUVs(uv, colorUV, depthUV, perspectiveUV, perspective);
        float depth = dkSampleDepth(depthUV, perspective, perspectiveUV);
        bool valid = dkValidateNormalizedDepth(perspective, depth);
#ifdef DK_USE_DEBUG_COLOR
        _ColorData[id.xy] = float4(dkGetDebugCameraColor(perspective), valid);
#else
        float3 c = dkSampleColor(colorUV);
        _ColorData[id.xy] = float4(c, valid);
#endif
    }
    else
    {
        _PositionData[id.xy] = float4(0, 0, 0, 0);
        _NormalData[id.xy] = float4(0, 0, 0, 0);
        _ColorData[id.xy] = float4(0, 0, 0, 0);
    }
}


[numthreads(16, 16, 1)]
void CopyCoreMeshToTextures16x16(uint3 id : SV_DispatchThreadID)
{
    CopyCoreMeshToTextures(id);
}

[numthreads(8, 8, 1)]
void CopyCoreMeshToTextures8x8(uint3 id : SV_DispatchThreadID)
{
    CopyCoreMeshToTextures(id);
}

[numthreads(4, 4, 1)]
void CopyCoreMeshToTextures4x4(uint3 id : SV_DispatchThreadID)
{
    CopyCoreMeshToTextures(id);
}

